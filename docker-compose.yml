networks:
  microservice:
    driver: bridge

version: '3.7'
services:
  ## PostgresSQL Docker Compose Config
  postgres-user:
    image: postgres
    container_name: postgres-user
    ports:
      - "5432:5432"
    expose:
      - "5432"
    environment:
      POSTGRES_DB: user_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1
      PGDATA: /data/postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: always
    networks:
      - microservice

  ## Mongo Docker Compose Config
  product-mongo:
    image: mongo
    container_name: product-mongo
    restart: always
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - mongo-data:/var/lib/mongo
    networks:
      - microservice

  ## MySQL Docker Compose Config
  mysql-order:
    image: mysql
    container_name: mysql-order
    environment:
      MYSQL_DATABASE: order-service
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: John123
    ports:
      - '3307:3306'
    expose:
      - '3307'
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - microservice

  ## Cassandra Docker Compose Config
  cassandra-inventory:
    image: cassandra:3.11.14
    container_name: cassandra-inventory
    ports:
      - "9042:9042"
    expose:
      - "9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=datacenter1
    volumes:
      - cassandra-data:/var/lib/cassandra
    networks:
      - microservice


  ## Eureka Server
  discovery-server:
    image: discovery-server:latest
    container_name: discovery-server
    build:
      context: /discovery/.
    ports:
      - "8761:8761"
    expose:
      - "8761"
    networks:
      - microservice

  ## api-gateway
  api-gateway:
    image: api-gateway:latest
    container_name: api-gateway
    build:
      context: /gateway/.
    ports:
      - "8080:8080"
    expose:
      - "8080"
    depends_on:
      - discovery-server
    networks:
      - microservice


  ## User-Service Docker Compose Config
  user-service:
    image: user-service:latest
    container_name: user-service
    build:
      context: /user-service/.
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5432/user_service
    ports:
      - "8081:8081"
    expose:
      - "8081"
    depends_on:
      - postgres-user
      - discovery-server
      - api-gateway
    networks:
      - microservice

  ## Product-Service Docker Compose Config
  product-service:
    image: product-service:latest
    container_name: product-service
    build:
      context: /product-service/.
    environment:
      - SPRING_DATASOURCE_URL=mongodb://product-mongo:27017/product_service
    ports:
      - "8082:8082"
    expose:
      - "8082"
    depends_on:
      - product-mongo
      - discovery-server
      - api-gateway
    networks:
      - microservice

  ## Order-Service Docker Compose Config
  order-service:
    image: order-service:latest
    container_name: order-service
    build:
      context: /order-service/.
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-order:3307/order_service?useSSL=false&allowPublicKeyRetrieval=true
    ports:
      - "8083:8083"
    expose:
      - "8083"
    depends_on:
      - mysql-order
      - discovery-server
      - api-gateway
    networks:
      - microservice

  ## Inventory-Service Docker Compose Config
  inventory-service:
    image: inventory-service:latest
    container_name: inventory-service
    build:
      context: /inventory-service/.
    environment:
      - SPRING_DATASOURCE_URL=jdbc:cassandra://cassandra-inventory:9042/inventory_service
    ports:
      - "8084:8084"
    expose:
      - "8084"
    depends_on:
      - cassandra-inventory
      - discovery-server
      - api-gateway
    networks:
      - microservice

volumes:
  postgres-data:
  mongo-data:
  mysql-data:
  cassandra-data: